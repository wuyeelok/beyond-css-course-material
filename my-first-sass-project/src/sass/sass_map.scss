@use "sass:meta";
@use "sass:map";

// Don't forget quotation on keys
// dont forget comma at the end
$colors: (
  "primary": red,
  "secondary": blue,
  "accent": yellow,
  "special": orange,
);

$color-v2: (
  "primary": (
    "light": lightblue,
    "normal": blue,
    "dark": darkblue,
  ),
  "secondary": (
    "light": pink,
    "normal": red,
    "dark": firebrick,
  ),
  "backup": (
    "light": rgb(231, 199, 95),
    "normal": yellow,
    "dark": rgba(139, 139, 20, 0.178),
  ),
  //"accent": orange,
);

$colors-v3: (
  primary: (
    light: lightblue,
    normal: blue,
    dark: darkblue,
  ),
  secondary: (
    light: pink,
    normal: red,
    dark: firebrick,
  ),
  accent: orange,
);

$font-size-map: (
  "large": 48px,
  "normal": 16px,
  "small": 11px,
);

$font-sizes: (
  "400": 1.125rem,
  "500": 1.25rem,
  "600": 1.525rem,
  "700": 2.25rem,
  "800": 2.5rem,
);

@each $name, $size in $font-sizes {
  .fs-#{$name} {
    font-size: $size;
  }
}

// Handle irregular map
@function clr($shade-value...) {
  $output-color: map.get($color-v2, $shade-value...);
  @if ($output-color != null) {
    @return $output-color;
  } @else {
    @error "You entered #{$color} which does not match!";
  }
}

// @debug "type of $colors is #{meta.type-of($colors)}!";
// @debug 'primary value is #{map.get($colors, "primary")}!';
// @debug 'special value is #{map.get($colors, "special")}!';

body {
  color: map.get($colors, "secondary");
  font-size: map.get($font-size-map, "small");
}

// .example {
//   //color: clr("accent");
// }

// Example of nested map
.exmaple-2 {
  color: clr("backup", "light");
}

// Use map to loop to create utitilty class
@each $color-name, $shade-map in $color-v2 {
  //@debug color-name is $color-name;
  //@debug shade-map is $shade-map;

  @each $shade-name, $shade-value in $shade-map {
    //@debug shade is $shade, color is $color;

    .clr-#{$color-name}-#{shade} {
      color: $shade-value;
    }

    .bg-#{$color-name}-#{shade} {
      color: $shade-value;
    }
  }
}

// has key and type of example
@function clr-v3($color...) {
  @if map.has-key($colors-v3, $color...) and
    meta.type-of(map.get($colors-v3, $color...)) ==
    "color"
  {
    @return map.get($colors-v3, $color...);
  } @else {
    @error '#{$color} dont have color value!';
  }
}

.test-v3 {
  font-size: 2rem;
  color: clr-v3(primary, dark);
  background-color: clr-v3(accent);
}
